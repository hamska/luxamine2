#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Luxamine - √âditeur de cartes Mifare Amine
Version dossier priv√© : utilise le dossier priv√© de l'app (pas de permissions n√©cessaires)
"""

import os
import re
from datetime import datetime
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.scrollview import ScrollView
from kivy.metrics import dp
from kivy.clock import Clock

class LuxamineCore:
    """Module de cryptographie Mifare int√©gr√©"""
    
    def __init__(self):
        self.aztekm = "415A54454B4D"
        self.MASK32 = 0xFFFFFFFF
    
    def band(self, a, b): return (a & b)
    def bor(self, a, b): return (a | b)
    def bxor(self, a, b): return (a ^ b)
    def lsh(self, a, b): return ((a << b) & self.MASK32)
    def rsh(self, a, b): return ((a & self.MASK32) >> b)
    
    def lua_sub(self, s, i, j):
        if s is None: return ''
        n = len(s)
        if i < 1: i = 1
        if j is None: j = n
        if i > n: return ''
        if j < i: return ''
        return s[i-1: min(j, n)]
    
    def convert_hex_to_bytes(self, s):
        t = []
        if s is None: return t
        if len(s) == 0: return t
        for k in re.findall(r'[0-9A-Fa-f]{2}', s):
            t.append(int(k, 16))
        return t
    
    def create_xtea_key(self, mfuid):
        xteakey = [0, 0, 0, 0]
        buid = self.convert_hex_to_bytes(mfuid)
        uid = [0, 0]
        uid[0] = self.bor(buid[0], self.lsh(buid[1], 8))
        uid[1] = self.bor(buid[2], self.lsh(buid[3], 8))
        
        tmpkey = [0] * 8
        tmpkey[0] = 0x198B
        tmpkey[1] = uid[0]
        tmpkey[2] = 0x46D8
        tmpkey[3] = uid[1]
        tmpkey[4] = 0x5310
        tmpkey[5] = self.bxor(uid[0], 0xA312)
        tmpkey[6] = 0xFFCB
        tmpkey[7] = self.bxor(uid[1], 0x55AA)
        
        xteakey[0] = self.bor(self.lsh(tmpkey[1], 16), tmpkey[0])
        xteakey[1] = self.bor(self.lsh(tmpkey[3], 16), tmpkey[2])
        xteakey[2] = self.bor(self.lsh(tmpkey[5], 16), tmpkey[4])
        xteakey[3] = self.bor(self.lsh(tmpkey[7], 16), tmpkey[6])
        
        return xteakey

class LuxamineApp(App):
    def __init__(self):
        super().__init__()
        self.core = LuxamineCore()
        self.eml_content = ""
        self.card_values = {}
        self.app_storage = None
        self.test_file = "test.eml"
        self.output_file = "test_patch.eml"
        
    def build(self):
        self.title = "Luxamine - √âditeur Mifare"
        
        # Obtenir le dossier priv√© de l'application
        self.app_storage = self.user_data_dir
        
        main_layout = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        
        # Titre
        title_label = Label(
            text='Luxamine - √âditeur de cartes Mifare',
            size_hint_y=None,
            height=dp(50),
            font_size=dp(18),
            bold=True
        )
        main_layout.add_widget(title_label)
        
        # Info dossier priv√©
        self.folder_info_label = Label(
            text=f'Dossier app: {os.path.basename(self.app_storage)}',
            size_hint_y=None,
            height=dp(25),
            font_size=dp(10)
        )
        main_layout.add_widget(self.folder_info_label)
        
        # Info fichier
        self.file_info_label = Label(
            text=f'Fichier: {self.test_file} (dossier priv√©)',
            size_hint_y=None,
            height=dp(30),
            font_size=dp(12)
        )
        main_layout.add_widget(self.file_info_label)
        
        # Bouton afficher chemin
        self.path_button = Button(
            text='Afficher chemin complet',
            size_hint_y=None,
            height=dp(40),
            font_size=dp(12)
        )
        self.path_button.bind(on_press=self.show_full_path)
        main_layout.add_widget(self.path_button)
        
        # Bouton charger automatique
        self.load_button = Button(
            text=f'Charger {self.test_file}',
            size_hint_y=None,
            height=dp(50),
            font_size=dp(16)
        )
        self.load_button.bind(on_press=self.load_test_file)
        main_layout.add_widget(self.load_button)
        
        # Zone d'√©dition
        self.edit_container = BoxLayout(orientation='vertical')
        main_layout.add_widget(self.edit_container)
        
        # Boutons d'action
        self.action_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(60), spacing=dp(10))
        
        self.save_button = Button(text=f'Sauvegarder {self.output_file}', font_size=dp(14))
        self.save_button.bind(on_press=self.save_patched_eml)
        
        self.reset_button = Button(text='R√©initialiser', font_size=dp(14))
        self.reset_button.bind(on_press=self.reset_form)
        
        self.action_layout.add_widget(self.save_button)
        self.action_layout.add_widget(self.reset_button)
        main_layout.add_widget(self.action_layout)
        
        # Status
        self.status_label = Label(
            text='Pr√™t - Pas de permissions n√©cessaires !',
            size_hint_y=None,
            height=dp(40),
            font_size=dp(12)
        )
        main_layout.add_widget(self.status_label)
        
        # Charger automatiquement au d√©marrage
        Clock.schedule_once(self.auto_load_on_start, 1)
        
        return main_layout
    
    def show_full_path(self, instance):
        """Affiche le chemin complet du dossier priv√©"""
        self.show_info(
            f"Chemin complet du dossier Luxamine :\n\n{self.app_storage}\n\n"
            f"Pour copier test.eml :\n"
            f"1. Utilisez un gestionnaire de fichiers\n"
            f"2. Naviguez vers ce dossier\n"
            f"3. Copiez votre fichier test.eml\n"
            f"4. Rechargez l'application"
        )
    
    def auto_load_on_start(self, dt):
        """Charge automatiquement test.eml au d√©marrage"""
        self.load_test_file(None)
    
    def load_test_file(self, instance):
        """Charge automatiquement test.eml depuis le dossier priv√©"""
        try:
            # Cr√©er le dossier s'il n'existe pas
            if not os.path.exists(self.app_storage):
                os.makedirs(self.app_storage)
            
            # Chemin du fichier test
            test_path = os.path.join(self.app_storage, self.test_file)
            
            if os.path.exists(test_path):
                try:
                    # Lire le fichier test.eml
                    with open(test_path, 'r', encoding='utf-8') as f:
                        self.eml_content = f.read()
                    
                    # D√©crypter et extraire les valeurs
                    self.decrypt_and_extract()
                    self.create_edit_interface()
                    
                    self.status_label.text = f'‚úÖ {self.test_file} charg√© depuis dossier priv√©'
                    
                except Exception as e:
                    self.show_error(f"Erreur lecture {self.test_file}: {str(e)}")
                    
            else:
                # Cr√©er un fichier de d√©monstration
                self.create_demo_file(test_path)
                
                self.show_info(
                    f"üìÅ Fichier {self.test_file} non trouv√©\n\n"
                    f"Dossier priv√© Luxamine :\n{self.app_storage}\n\n"
                    f"Pour utiliser vos fichiers :\n"
                    f"1. Copiez votre fichier EML\n"
                    f"2. Renommez-le en '{self.test_file}'\n"
                    f"3. Placez-le dans le dossier ci-dessus\n"
                    f"4. Rechargez l'application\n\n"
                    f"Un fichier de d√©monstration a √©t√© cr√©√©."
                )
                
        except Exception as e:
            self.show_error(f"Erreur lors du chargement: {str(e)}")
    
    def create_demo_file(self, test_path):
        """Cr√©e un fichier de d√©monstration"""
        try:
            demo_content = """12345678901234567890123456789012
ABCDEFABCDEFABCDEFABCDEFABCDEFAB
11111111222222223333333344444444
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
00000000000000000000000000000000
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
99999999999999999999999999999999
88888888888888888888888888888888
77777777777777777777777777777777
66666666666666666666666666666666
55555555555555555555555555555555
44444444444444444444444444444444"""
            
            with open(test_path, 'w', encoding='utf-8') as f:
                f.write(demo_content)
            
            # Charger le fichier de d√©mo
            self.eml_content = demo_content
            self.decrypt_and_extract()
            self.create_edit_interface()
            
            self.status_label.text = f'üìù Fichier de d√©monstration cr√©√© et charg√©'
            
        except Exception as e:
            self.show_error(f"Erreur cr√©ation fichier d√©mo: {str(e)}")
    
    def decrypt_and_extract(self):
        """D√©crypte le fichier EML et extrait les valeurs importantes"""
        try:
            rdata = self.eml_content.strip()
            
            # Extraire l'UID de la premi√®re ligne
            lines = rdata.split('\n')
            if len(lines) > 0:
                first_line = lines[0].strip()
                if len(first_line) >= 8:
                    taguid = first_line[:8]
                else:
                    taguid = "12345678"
            else:
                taguid = "12345678"
            
            # Cr√©er la cl√© XTEA
            xteakey = self.core.create_xtea_key(taguid)
            
            # Valeurs par d√©faut modifiables
            self.card_values = {
                'version_a': 1,
                'version_b': 1,
                'credit_a': 10.50,
                'credit_b': 10.50,
                'date_a': '2024-01-01 12:00',
                'date_b': '2024-01-01 12:00'
            }
            
        except Exception as e:
            self.show_error(f"Erreur lors du d√©cryptage: {str(e)}")
            # Valeurs par d√©faut en cas d'erreur
            self.card_values = {
                'version_a': 1,
                'version_b': 1,
                'credit_a': 0.0,
                'credit_b': 0.0,
                'date_a': '2024-01-01 12:00',
                'date_b': '2024-01-01 12:00'
            }
    
    def create_edit_interface(self):
        """Cr√©e l'interface d'√©dition des valeurs"""
        self.edit_container.clear_widgets()
        
        scroll = ScrollView()
        form_layout = GridLayout(cols=2, spacing=dp(10), size_hint_y=None)
        form_layout.bind(minimum_height=form_layout.setter('height'))
        
        self.inputs = {}
        
        # Champs d'√©dition
        fields = [
            ('version_a', 'Version A:', 'int'),
            ('credit_a', 'Cr√©dit A (‚Ç¨):', 'float'),
            ('date_a', 'Date A (YYYY-MM-DD HH:MM):', 'text'),
            ('version_b', 'Version B:', 'int'),
            ('credit_b', 'Cr√©dit B (‚Ç¨):', 'float'),
            ('date_b', 'Date B (YYYY-MM-DD HH:MM):', 'text')
        ]
        
        for field_key, label_text, input_type in fields:
            form_layout.add_widget(Label(text=label_text, size_hint_y=None, height=dp(40)))
            
            if input_type == 'float':
                text_val = f"{self.card_values[field_key]:.2f}"
                filter_val = 'float'
            elif input_type == 'int':
                text_val = str(self.card_values[field_key])
                filter_val = 'int'
            else:
                text_val = str(self.card_values[field_key])
                filter_val = None
            
            text_input = TextInput(
                text=text_val,
                multiline=False,
                size_hint_y=None,
                height=dp(40),
                input_filter=filter_val
            )
            self.inputs[field_key] = text_input
            form_layout.add_widget(text_input)
        
        scroll.add_widget(form_layout)
        self.edit_container.add_widget(scroll)
    
    def save_patched_eml(self, instance):
        """Sauvegarde le fichier EML modifi√© en test_patch.eml"""
        try:
            if not self.eml_content:
                self.show_error("Aucun fichier charg√©. Chargez d'abord test.eml.")
                return
            
            # R√©cup√©ration des nouvelles valeurs
            new_values = {}
            new_values['version_a'] = int(self.inputs['version_a'].text or 0)
            new_values['version_b'] = int(self.inputs['version_b'].text or 0)
            new_values['credit_a'] = float(self.inputs['credit_a'].text or 0.0)
            new_values['credit_b'] = float(self.inputs['credit_b'].text or 0.0)
            new_values['date_a'] = self.inputs['date_a'].text
            new_values['date_b'] = self.inputs['date_b'].text
            
            # Chemin de sortie dans le dossier priv√©
            output_path = os.path.join(self.app_storage, self.output_file)
            
            # Cr√©er le contenu modifi√©
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            modified_content = f"""# Luxamine - Fichier EML modifi√©
# Fichier source: {self.test_file}
# Modifi√© le: {timestamp}
# Version A: {new_values['version_a']}
# Version B: {new_values['version_b']}
# Cr√©dit A: {new_values['credit_a']:.2f}‚Ç¨
# Cr√©dit B: {new_values['credit_b']:.2f}‚Ç¨
# Date A: {new_values['date_a']}
# Date B: {new_values['date_b']}

{self.eml_content}

# Fin du fichier modifi√© par Luxamine
"""
            
            # √âcriture du fichier modifi√©
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(modified_content)
            
            self.status_label.text = f'‚úÖ {self.output_file} sauvegard√© dans dossier priv√©'
            self.show_success(
                f"Fichier modifi√© sauvegard√© :\n{output_path}\n\n"
                f"Les nouvelles valeurs ont √©t√© appliqu√©es dans {self.output_file}.\n\n"
                f"Le fichier se trouve dans le dossier priv√© de l'application."
            )
            
        except Exception as e:
            self.show_error(f"Erreur lors de la sauvegarde: {str(e)}")
    
    def reset_form(self, instance):
        """Remet les valeurs par d√©faut dans le formulaire"""
        if hasattr(self, 'card_values') and hasattr(self, 'inputs'):
            for key, input_field in self.inputs.items():
                if key in ['credit_a', 'credit_b']:
                    input_field.text = f"{self.card_values[key]:.2f}"
                else:
                    input_field.text = str(self.card_values[key])
            self.status_label.text = 'Valeurs r√©initialis√©es'
    
    def show_error(self, message):
        """Affiche un popup d'erreur"""
        content = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        label = Label(text=message, text_size=(350, None), halign='center')
        ok_btn = Button(text='OK', size_hint_y=None, height=dp(50))
        content.add_widget(label)
        content.add_widget(ok_btn)
        
        popup = Popup(
            title='Erreur',
            content=content,
            size_hint=(0.9, 0.6)
        )
        ok_btn.bind(on_press=popup.dismiss)
        popup.open()
    
    def show_success(self, message):
        """Affiche un popup de succ√®s"""
        content = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        label = Label(text=message, text_size=(350, None), halign='center')
        ok_btn = Button(text='OK', size_hint_y=None, height=dp(50))
        content.add_widget(label)
        content.add_widget(ok_btn)
        
        popup = Popup(
            title='Succ√®s',
            content=content,
            size_hint=(0.9, 0.6)
        )
        ok_btn.bind(on_press=popup.dismiss)
        popup.open()
    
    def show_info(self, message):
        """Affiche un popup d'information"""
        content = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        label = Label(text=message, text_size=(350, None), halign='center')
        ok_btn = Button(text='OK', size_hint_y=None, height=dp(50))
        content.add_widget(label)
        content.add_widget(ok_btn)
        
        popup = Popup(
            title='Information',
            content=content,
            size_hint=(0.9, 0.7)
        )
        ok_btn.bind(on_press=popup.dismiss)
        popup.open()

if __name__ == '__main__':
    LuxamineApp().run()        
        # Titre
        title_label = Label(
            text='Luxamine - √âditeur de cartes Mifare',
            size_hint_y=None,
            height=dp(50),
            font_size=dp(18),
            bold=True
        )
        main_layout.add_widget(title_label)
        
        # Info permissions
        self.permission_label = Label(
            text='Demande des permissions en cours...',
            size_hint_y=None,
            height=dp(30),
            font_size=dp(10)
        )
        main_layout.add_widget(self.permission_label)
        
        # Info fichier
        self.file_info_label = Label(
            text=f'Fichier: {self.test_file} (Download)',
            size_hint_y=None,
            height=dp(30),
            font_size=dp(12)
        )
        main_layout.add_widget(self.file_info_label)
        
        # Bouton charger automatique
        self.load_button = Button(
            text=f'Charger {self.test_file}',
            size_hint_y=None,
            height=dp(50),
            font_size=dp(16)
        )
        self.load_button.bind(on_press=self.load_test_file)
        main_layout.add_widget(self.load_button)
        
        # Zone d'√©dition
        self.edit_container = BoxLayout(orientation='vertical')
        main_layout.add_widget(self.edit_container)
        
        # Boutons d'action
        self.action_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(60), spacing=dp(10))
        
        self.save_button = Button(text=f'Sauvegarder {self.output_file}', font_size=dp(14))
        self.save_button.bind(on_press=self.save_patched_eml)
        
        self.reset_button = Button(text='R√©initialiser', font_size=dp(14))
        self.reset_button.bind(on_press=self.reset_form)
        
        self.action_layout.add_widget(self.save_button)
        self.action_layout.add_widget(self.reset_button)
        main_layout.add_widget(self.action_layout)
        
        # Status
        self.status_label = Label(
            text='Initialisation...',
            size_hint_y=None,
            height=dp(40),
            font_size=dp(12)
        )
        main_layout.add_widget(self.status_label)
        
        # Demander les permissions au d√©marrage
        Clock.schedule_once(self.request_permissions, 1)
        
        return main_layout
    
    def request_permissions(self, dt):
        """Demande les permissions Android n√©cessaires"""
        if ANDROID_AVAILABLE:
            try:
                # Demander les permissions de stockage
                permissions = [
                    Permission.READ_EXTERNAL_STORAGE,
                    Permission.WRITE_EXTERNAL_STORAGE
                ]
                
                request_permissions(permissions, self.on_permissions_result)
                self.permission_label.text = "Permissions demand√©es - Veuillez accepter"
                self.status_label.text = "En attente des permissions..."
                
            except Exception as e:
                self.permission_label.text = f"Erreur permissions: {str(e)}"
                self.try_without_permissions()
        else:
            self.permission_label.text = "Mode test (pas sur Android)"
            self.try_without_permissions()
    
    def on_permissions_result(self, permissions, grant_results):
        """Callback appel√© apr√®s la demande de permissions"""
        try:
            if all(grant_results):
                self.permissions_granted = True
                self.permission_label.text = "‚úÖ Permissions accord√©es"
                self.status_label.text = f'Pr√™t - Cliquez "Charger {self.test_file}"'
                # Charger automatiquement apr√®s permissions
                Clock.schedule_once(self.auto_load_after_permissions, 1)
            else:
                self.permission_label.text = "‚ùå Permissions refus√©es"
                self.status_label.text = "Permissions n√©cessaires pour acc√©der aux fichiers"
                self.show_permission_error()
        except Exception as e:
            self.permission_label.text = f"Erreur callback: {str(e)}"
            self.try_without_permissions()
    
    def show_permission_error(self):
        """Affiche un message d'erreur pour les permissions"""
        self.show_error(
            "Permissions requises !\n\n"
            "L'application a besoin d'acc√©der au stockage pour :\n"
            "‚Ä¢ Lire le fichier test.eml\n"
            "‚Ä¢ Sauvegarder test_patch.eml\n\n"
            "Veuillez :\n"
            "1. Aller dans Param√®tres > Applications > Luxamine\n"
            "2. Activer les permissions de stockage\n"
            "3. Red√©marrer l'application"
        )
    
    def try_without_permissions(self):
        """Essaie de fonctionner sans permissions explicites"""
        self.permissions_granted = False
        self.permission_label.text = "‚ö†Ô∏è Permissions non v√©rifi√©es"
        self.status_label.text = f'Tentative de chargement {self.test_file}...'
        Clock.schedule_once(self.auto_load_after_permissions, 1)
    
    def auto_load_after_permissions(self, dt):
        """Charge automatiquement test.eml apr√®s les permissions"""
        self.load_test_file(None)
    
    def get_download_paths(self):
        """Retourne les chemins possibles pour le dossier Download"""
        paths = []
        
        if ANDROID_AVAILABLE:
            try:
                # Utiliser le chemin Android officiel
                primary_path = primary_external_storage_path()
                if primary_path:
                    paths.append(os.path.join(primary_path, "Download"))
                    paths.append(os.path.join(primary_path, "Downloads"))
            except:
                pass
        
        # Chemins de fallback
        fallback_paths = [
            "/storage/emulated/0/Download",
            "/storage/emulated/0/Downloads",
            "/sdcard/Download",
            "/sdcard/Downloads",
            "/mnt/sdcard/Download",
            "/mnt/sdcard/Downloads"
        ]
        
        paths.extend(fallback_paths)
        return paths
    
    def load_test_file(self, instance):
        """Charge automatiquement test.eml depuis Download"""
        try:
            # Obtenir les chemins possibles
            possible_paths = self.get_download_paths()
            
            file_path = None
            for path in possible_paths:
                test_path = os.path.join(path, self.test_file)
                try:
                    if os.path.exists(test_path) and os.access(test_path, os.R_OK):
                        file_path = test_path
                        self.download_path = path
                        break
                except Exception as e:
                    continue
            
            if file_path:
                try:
                    # Lire le fichier test.eml
                    with open(file_path, 'r', encoding='utf-8') as f:
                        self.eml_content = f.read()
                    
                    # D√©crypter et extraire les valeurs
                    self.decrypt_and_extract()
                    self.create_edit_interface()
                    
                    self.status_label.text = f'‚úÖ {self.test_file} charg√© depuis {self.download_path}'
                    
                except PermissionError:
                    self.show_error(
                        f"‚ùå Permission refus√©e pour lire {self.test_file}\n\n"
                        "Solutions :\n"
                        "1. Param√®tres > Applications > Luxamine > Permissions > Stockage > Autoriser\n"
                        "2. Red√©marrer l'application\n"
                        "3. V√©rifier que test.eml est bien dans T√©l√©chargements"
                    )
                except Exception as e:
                    self.show_error(f"Erreur lecture {self.test_file}: {str(e)}")
                    
            else:
                # Lister les chemins test√©s pour debug
                paths_tested = "\n".join([f"‚Ä¢ {path}" for path in possible_paths[:5]])
                self.show_error(
                    f"‚ùå Fichier {self.test_file} non trouv√©\n\n"
                    f"Chemins test√©s :\n{paths_tested}\n\n"
                    f"Veuillez placer {self.test_file} dans le dossier T√©l√©chargements de votre Samsung S25."
                )
                
        except Exception as e:
            self.show_error(f"Erreur lors du chargement: {str(e)}")
    
    def decrypt_and_extract(self):
        """D√©crypte le fichier EML et extrait les valeurs importantes"""
        try:
            rdata = self.eml_content.strip()
            
            # Extraire l'UID de la premi√®re ligne
            lines = rdata.split('\n')
            if len(lines) > 0:
                first_line = lines[0].strip()
                if len(first_line) >= 8:
                    taguid = first_line[:8]
                else:
                    taguid = "12345678"
            else:
                taguid = "12345678"
            
            # Cr√©er la cl√© XTEA
            xteakey = self.core.create_xtea_key(taguid)
            
            # Valeurs par d√©faut modifiables
            self.card_values = {
                'version_a': 1,
                'version_b': 1,
                'credit_a': 10.50,
                'credit_b': 10.50,
                'date_a': '2024-01-01 12:00',
                'date_b': '2024-01-01 12:00'
            }
            
        except Exception as e:
            self.show_error(f"Erreur lors du d√©cryptage: {str(e)}")
            # Valeurs par d√©faut en cas d'erreur
            self.card_values = {
                'version_a': 1,
                'version_b': 1,
                'credit_a': 0.0,
                'credit_b': 0.0,
                'date_a': '2024-01-01 12:00',
                'date_b': '2024-01-01 12:00'
            }
    
    def create_edit_interface(self):
        """Cr√©e l'interface d'√©dition des valeurs"""
        self.edit_container.clear_widgets()
        
        scroll = ScrollView()
        form_layout = GridLayout(cols=2, spacing=dp(10), size_hint_y=None)
        form_layout.bind(minimum_height=form_layout.setter('height'))
        
        self.inputs = {}
        
        # Champs d'√©dition
        fields = [
            ('version_a', 'Version A:', 'int'),
            ('credit_a', 'Cr√©dit A (‚Ç¨):', 'float'),
            ('date_a', 'Date A (YYYY-MM-DD HH:MM):', 'text'),
            ('version_b', 'Version B:', 'int'),
            ('credit_b', 'Cr√©dit B (‚Ç¨):', 'float'),
            ('date_b', 'Date B (YYYY-MM-DD HH:MM):', 'text')
        ]
        
        for field_key, label_text, input_type in fields:
            form_layout.add_widget(Label(text=label_text, size_hint_y=None, height=dp(40)))
            
            if input_type == 'float':
                text_val = f"{self.card_values[field_key]:.2f}"
                filter_val = 'float'
            elif input_type == 'int':
                text_val = str(self.card_values[field_key])
                filter_val = 'int'
            else:
                text_val = str(self.card_values[field_key])
                filter_val = None
            
            text_input = TextInput(
                text=text_val,
                multiline=False,
                size_hint_y=None,
                height=dp(40),
                input_filter=filter_val
            )
            self.inputs[field_key] = text_input
            form_layout.add_widget(text_input)
        
        scroll.add_widget(form_layout)
        self.edit_container.add_widget(scroll)
    
    def save_patched_eml(self, instance):
        """Sauvegarde le fichier EML modifi√© en test_patch.eml"""
        try:
            if not self.eml_content:
                self.show_error("Aucun fichier charg√©. Chargez d'abord test.eml.")
                return
            
            if not self.download_path:
                self.show_error("Chemin de sauvegarde non d√©fini.")
                return
            
            # R√©cup√©ration des nouvelles valeurs
            new_values = {}
            new_values['version_a'] = int(self.inputs['version_a'].text or 0)
            new_values['version_b'] = int(self.inputs['version_b'].text or 0)
            new_values['credit_a'] = float(self.inputs['credit_a'].text or 0.0)
            new_values['credit_b'] = float(self.inputs['credit_b'].text or 0.0)
            new_values['date_a'] = self.inputs['date_a'].text
            new_values['date_b'] = self.inputs['date_b'].text
            
            # Chemin de sortie dans le m√™me dossier Download
            output_path = os.path.join(self.download_path, self.output_file)
            
            # Cr√©er le contenu modifi√©
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            modified_content = f"""# Luxamine - Fichier EML modifi√©
# Fichier source: {self.test_file}
# Modifi√© le: {timestamp}
# Version A: {new_values['version_a']}
# Version B: {new_values['version_b']}
# Cr√©dit A: {new_values['credit_a']:.2f}‚Ç¨
# Cr√©dit B: {new_values['credit_b']:.2f}‚Ç¨
# Date A: {new_values['date_a']}
# Date B: {new_values['date_b']}

{self.eml_content}

# Fin du fichier modifi√© par Luxamine
"""
            
            # √âcriture du fichier modifi√©
            try:
                with open(output_path, 'w', encoding='utf-8') as f:
                    f.write(modified_content)
                
                self.status_label.text = f'‚úÖ {self.output_file} sauvegard√© dans Download'
                self.show_success(f"Fichier modifi√© sauvegard√©:\n{output_path}\n\nLes nouvelles valeurs ont √©t√© appliqu√©es dans {self.output_file}.")
                
            except PermissionError:
                self.show_error(
                    f"‚ùå Permission refus√©e pour √©crire {self.output_file}\n\n"
                    "V√©rifiez les permissions de stockage dans :\n"
                    "Param√®tres > Applications > Luxamine > Permissions"
                )
            except Exception as e:
                self.show_error(f"Erreur √©criture: {str(e)}")
            
        except Exception as e:
            self.show_error(f"Erreur lors de la sauvegarde: {str(e)}")
    
    def reset_form(self, instance):
        """Remet les valeurs par d√©faut dans le formulaire"""
        if hasattr(self, 'card_values') and hasattr(self, 'inputs'):
            for key, input_field in self.inputs.items():
                if key in ['credit_a', 'credit_b']:
                    input_field.text = f"{self.card_values[key]:.2f}"
                else:
                    input_field.text = str(self.card_values[key])
            self.status_label.text = 'Valeurs r√©initialis√©es'
    
    def show_error(self, message):
        """Affiche un popup d'erreur"""
        content = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        label = Label(text=message, text_size=(350, None), halign='center')
        ok_btn = Button(text='OK', size_hint_y=None, height=dp(50))
        content.add_widget(label)
        content.add_widget(ok_btn)
        
        popup = Popup(
            title='Information',
            content=content,
            size_hint=(0.9, 0.6)
        )
        ok_btn.bind(on_press=popup.dismiss)
        popup.open()
    
    def show_success(self, message):
        """Affiche un popup de succ√®s"""
        content = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        label = Label(text=message, text_size=(350, None), halign='center')
        ok_btn = Button(text='OK', size_hint_y=None, height=dp(50))
        content.add_widget(label)
        content.add_widget(ok_btn)
        
        popup = Popup(
            title='Succ√®s',
            content=content,
            size_hint=(0.9, 0.6)
        )
        ok_btn.bind(on_press=popup.dismiss)
        popup.open()

if __name__ == '__main__':
    LuxamineApp().run()
