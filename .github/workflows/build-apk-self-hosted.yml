name: Build Luxamine APK (Self-Hosted Runner)

on:
  push:
    branches: [ main, master ]
    paths: [ 'main.py', 'buildozer.spec', '.github/workflows/**' ]
  workflow_dispatch:
  pull_request:
    branches: [ main, master ]

# √âvite les builds multiples simultan√©s
concurrency:
  group: luxamine-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 60
    
    env:
      ANDROID_HOME: /opt/android-sdk
      ANDROID_SDK_ROOT: /opt/android-sdk
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup environment info
      run: |
        echo "üèóÔ∏è Building on self-hosted runner"
        echo "Runner: $(hostname)"
        echo "OS: $(lsb_release -d)"
        echo "CPU: $(nproc) cores"
        echo "RAM: $(free -h | grep Mem | awk '{print $2}')"
        echo "Disk: $(df -h / | tail -1 | awk '{print $4}') free"

    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          python3 python3-pip python3-dev python3-venv \
          openjdk-11-jdk \
          build-essential git wget unzip \
          libffi-dev libssl-dev \
          zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
          libncurses5-dev libncursesw5-dev xz-utils tk-dev \
          liblzma-dev python3-openssl \
          autotools-dev autoconf pkg-config cmake \
          libtool automake

    - name: Setup Android SDK (cached)
      id: android-sdk
      run: |
        if [ ! -d "/opt/android-sdk" ]; then
          echo "Installing Android SDK..."
          sudo mkdir -p /opt/android-sdk
          sudo chown $USER:$USER /opt/android-sdk
          
          # Download command line tools
          cd /tmp
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          
          # Install SDK
          mkdir -p /opt/android-sdk/cmdline-tools
          mv cmdline-tools /opt/android-sdk/cmdline-tools/latest
          
          # Install required components
          yes | /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" \
            "build-tools;30.0.3" \
            "ndk;25.2.9519653"
        else
          echo "Android SDK already installed"
        fi

    - name: Setup Python environment
      run: |
        python3 -m pip install --upgrade pip setuptools wheel
        pip3 install buildozer==1.5.0 cython==0.29.33

    - name: Cache Buildozer dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.buildozer
          .buildozer
        key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-${{ runner.os }}-

    - name: Verify buildozer setup
      run: |
        echo "Buildozer version: $(buildozer --version)"
        echo "Python version: $(python3 --version)"
        echo "Java version: $(java -version 2>&1 | head -1)"
        echo "Android SDK: $ANDROID_HOME"
        ls -la $ANDROID_HOME/ || echo "Android SDK not found"

    - name: Build APK
      run: |
        echo "üöÄ Starting APK build..."
        echo "Working directory: $(pwd)"
        echo "Files present:"
        ls -la
        
        # Build with verbose output
        buildozer android debug --verbose
        
        echo "‚úÖ Build completed"

    - name: Verify APK creation
      run: |
        echo "üì¶ Checking for APK files..."
        find . -name "*.apk" -type f -exec ls -lh {} \;
        
        if [ -f bin/*.apk ]; then
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "APK_FILE=$APK_FILE" >> $GITHUB_ENV
          echo "APK_SIZE=$(du -h "$APK_FILE" | cut -f1)" >> $GITHUB_ENV
          echo "‚úÖ APK found: $APK_FILE ($(du -h "$APK_FILE" | cut -f1))"
        else
          echo "‚ùå No APK file found!"
          echo "Contents of bin directory:"
          ls -la bin/ || echo "No bin directory"
          exit 1
        fi

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: luxamine-apk-${{ github.run_number }}
        path: bin/*.apk
        retention-days: 30

    - name: Create Release (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Luxamine Android v${{ github.run_number }}
        body: |
          üéâ **Luxamine Android APK - Build ${{ github.run_number }}**
          
          üì± **√âditeur de cartes Mifare Amine**
          
          **Fonctionnalit√©s :**
          - ‚úÖ D√©cryptage automatique des fichiers EML
          - ‚úÖ Modification des valeurs (Version, Cr√©dit, Date)
          - ‚úÖ Recryptage avec CRC recalcul√©s
          - ‚úÖ Interface mobile intuitive avec Kivy
          
          **D√©tails techniques :**
          - üì¶ Taille: ${{ env.APK_SIZE }}
          - üèóÔ∏è Compil√© sur: Self-hosted runner (Google Cloud)
          - üêç Python + Kivy + Buildozer
          - üì± Compatible: Android 5.0+ (API 21+)
          
          **Installation :**
          1. T√©l√©chargez le fichier APK ci-dessous
          2. Activez "Sources inconnues" sur Android
          3. Installez l'APK
          4. Testez avec vos fichiers EML
          
          ---
          *Compil√© automatiquement via GitHub Actions + Self-hosted runner*
        files: bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build summary
      if: always()
      run: |
        echo "## üèóÔ∏è Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner:** Self-hosted (Google Cloud Ubuntu 22.04)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ env.APK_FILE }}" ]; then
          echo "- **APK:** $(basename ${{ env.APK_FILE }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Size:** ${{ env.APK_SIZE }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Build time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup (optional)
      if: always()
      run: |
        # Nettoyer les fichiers temporaires pour √©conomiser l'espace
        # D√©commentez si l'espace disque est limit√©
        # rm -rf .buildozer/android/platform/build-*
        echo "Build completed, temporary files preserved for caching"
