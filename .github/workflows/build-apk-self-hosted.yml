name: Build Luxamine APK (Self-Hosted Debug)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: System info and cleanup
      run: |
        echo "üîç System Information:"
        whoami
        pwd
        echo "HOME: $HOME"
        echo "PATH: $PATH"
        df -h
        free -h
        
        # Nettoyer les anciens builds
        rm -rf .buildozer || true
        rm -rf bin || true

    - name: Install system dependencies
      run: |
        echo "üì¶ Installing system dependencies..."
        sudo apt-get update -qq
        sudo apt-get install -y \
          python3 python3-pip python3-dev python3-venv \
          openjdk-11-jdk \
          build-essential git wget unzip \
          libffi-dev libssl-dev \
          zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
          autotools-dev autoconf pkg-config cmake \
          libtool automake

    - name: Setup Java environment
      run: |
        echo "‚òï Setting up Java..."
        export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
        echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
        echo "PATH=$PATH:$JAVA_HOME/bin" >> $GITHUB_ENV
        java -version
        
    - name: Install Android SDK and NDK
      run: |
        sudo mkdir -p /opt/android-sdk
        cd /opt/android-sdk
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip -o cmdline-tools.zip -d cmdline-tools
        yes | cmdline-tools/cmdline-tools/bin/sdkmanager --sdk_root=/opt/android-sdk \
           "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;23.1.7779620"
        echo "ANDROID_HOME=/opt/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=/opt/android-sdk" >> $GITHUB_ENV

    - name: Setup Android SDK
      run: |
        echo "üì± Setting up Android SDK..."
        
        sudo mkdir -p /opt/android-sdk
        sudo chown $USER:$USER /opt/android-sdk
        
        export ANDROID_HOME=/opt/android-sdk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        echo "ANDROID_HOME=/opt/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=/opt/android-sdk" >> $GITHUB_ENV
        echo "PATH=$PATH:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools" >> $GITHUB_ENV
        
        if [ ! -d "/opt/android-sdk/cmdline-tools" ]; then
          echo "Downloading Android SDK..."
          cd /tmp
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          mkdir -p /opt/android-sdk/cmdline-tools
          mv cmdline-tools /opt/android-sdk/cmdline-tools/latest
          
          yes | /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" \
            "build-tools;30.0.3" \
            "ndk;25.2.9519653"
        fi
        
        echo "Android SDK setup complete"
        ls -la /opt/android-sdk/

    - name: Setup Python environment
      run: |
        echo "üêç Setting up Python environment..."
        python3 --version
        pip3 --version
        
        # Fix compatibilit√© setuptools/packaging
        pip3 install --upgrade pip
        pip3 install "setuptools<70" "packaging<24" wheel
        
        # Installer buildozer
        pip3 install buildozer==1.5.0 cython==0.29.33

        # Activer imm√©diatement + pour les steps suivants
        export PATH=$PATH:$HOME/.local/bin
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
        buildozer --version
        which buildozer

    - name: Verify environment
      run: |
        echo "üîç Environment verification:"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "PATH: $PATH"
        echo "Working directory: $(pwd)"
        ls -la
        java -version
        python3 --version
        buildozer --version
        
        if [ -d "$ANDROID_HOME" ]; then
          echo "Android SDK found at: $ANDROID_HOME"
          ls -la $ANDROID_HOME/
        else
          echo "‚ùå Android SDK not found!"
        fi

    - name: Create buildozer.spec if missing
      run: |
        if [ ! -f "buildozer.spec" ]; then
          echo "üìù Creating buildozer.spec..."
          cat > buildozer.spec << 'EOF'
        [app]
        title = Luxamine
        package.name = luxamine
        package.domain = com.luxamine.editor
        source.dir = .
        version = 1.0
        requirements = python3,kivy
        orientation = portrait
        
        android.api = 33
        android.minapi = 21
        android.ndk = 23b
        android.archs = arm64-v8a
        android.accept_sdk_license = True
        android.permissions = WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
        
        [buildozer]
        log_level = 2
        warn_on_root = 1
        EOF
        fi
        
        echo "üìã Buildozer.spec content:"
        cat buildozer.spec

    - name: Install Java 17
      run: |
        sudo apt update
        sudo apt install -y openjdk-17-jdk
        sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-17-openjdk-amd64/bin/java 1
        sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
        java -version

    - name: Build APK with full debug
      run: |
        echo "üöÄ Starting APK build with full debug..."
        
        export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
        export ANDROID_HOME=/opt/android-sdk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        echo "Environment variables set, starting build..."
        if buildozer android debug --verbose 2>&1 | tee build.log; then
          echo "‚úÖ Build successful!"
        else
          echo "‚ùå Build failed!"
          echo "Last 50 lines of build log:"
          tail -50 build.log
          exit 1
        fi

    - name: Verify APK creation
      run: |
        echo "üì¶ Checking for APK files..."
        find . -name "*.apk" -type f -exec ls -lh {} \;
        
        if [ -f bin/*.apk ]; then
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "‚úÖ APK found: $APK_FILE"
          ls -lh "$APK_FILE"
        else
          echo "‚ùå No APK file found!"
          ls -la
          ls -la bin/ || echo "No bin directory"
          exit 1
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: luxamine-apk-debug-${{ github.run_number }}
        path: bin/*.apk
        retention-days: 30

    - name: Upload build logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build.log
          .buildozer/android/platform/build-*/logs/
        retention-days: 7
        echo "CPU: $(nproc) cores"
        echo "RAM: $(free -h | grep Mem | awk '{print $2}')"
        echo "Disk: $(df -h / | tail -1 | awk '{print $4}') free"

    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          python3 python3-pip python3-dev python3-venv \
          openjdk-11-jdk \
          build-essential git wget unzip \
          libffi-dev libssl-dev \
          zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
          libncurses5-dev libncursesw5-dev xz-utils tk-dev \
          liblzma-dev python3-openssl \
          autotools-dev autoconf pkg-config cmake \
          libtool automake

    - name: Setup Android SDK (cached)
      id: android-sdk
      run: |
        if [ ! -d "/opt/android-sdk" ]; then
          echo "Installing Android SDK..."
          sudo mkdir -p /opt/android-sdk
          sudo chown $USER:$USER /opt/android-sdk
          cd /tmp
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          mkdir -p /opt/android-sdk/cmdline-tools
          mv cmdline-tools /opt/android-sdk/cmdline-tools/latest
          yes | /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" \
            "build-tools;30.0.3" \
            "ndk;25.2.9519653"
        else
          echo "Android SDK already installed"
        fi

    - name: Setup Python environment
      run: |
        python3 -m pip install --upgrade pip
        pip3 install "setuptools<70" "packaging<24" wheel
        pip3 install buildozer==1.5.0 cython==0.29.33

    - name: Cache Buildozer dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.buildozer
          .buildozer
        key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-${{ runner.os }}-

    - name: Verify buildozer setup
      run: |
        echo "Buildozer version: $(buildozer --version)"
        echo "Python version: $(python3 --version)"
        echo "Java version: $(java -version 2>&1 | head -1)"
        echo "Android SDK: $ANDROID_HOME"
        ls -la $ANDROID_HOME/ || echo "Android SDK not found"

    - name: Build APK
      run: |
        echo "üöÄ Starting APK build..."
        echo "Working directory: $(pwd)"
        ls -la
        buildozer -v android debug
        echo "‚úÖ Build completed"

    - name: Verify APK creation
      run: |
        echo "üì¶ Checking for APK files..."
        find . -name "*.apk" -type f -exec ls -lh {} \;
        
        if [ -f bin/*.apk ]; then
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "APK_FILE=$APK_FILE" >> $GITHUB_ENV
          echo "APK_SIZE=$(du -h "$APK_FILE" | cut -f1)" >> $GITHUB_ENV
          echo "‚úÖ APK found: $APK_FILE ($(du -h "$APK_FILE" | cut -f1))"
        else
          echo "‚ùå No APK file found!"
          ls -la bin/ || echo "No bin directory"
          exit 1
        fi

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: luxamine-apk-${{ github.run_number }}
        path: bin/*.apk
        retention-days: 30

    - name: Create Release (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Luxamine Android v${{ github.run_number }}
        body: |
          üéâ **Luxamine Android APK - Build ${{ github.run_number }}**
          
          üì± **√âditeur de cartes Mifare Amine**
          
          **Fonctionnalit√©s :**
          - ‚úÖ D√©cryptage automatique des fichiers EML
          - ‚úÖ Modification des valeurs (Version, Cr√©dit, Date)
          - ‚úÖ Recryptage avec CRC recalcul√©s
          - ‚úÖ Interface mobile intuitive avec Kivy
          
          **D√©tails techniques :**
          - üì¶ Taille: ${{ env.APK_SIZE }}
          - üèóÔ∏è Compil√© sur: Self-hosted runner (Google Cloud)
          - üêç Python + Kivy + Buildozer
          - üì± Compatible: Android 5.0+ (API 21+)
          
          **Installation :**
          1. T√©l√©chargez le fichier APK ci-dessous
          2. Activez "Sources inconnues" sur Android
          3. Installez l'APK
          4. Testez avec vos fichiers EML
          
          ---
          *Compil√© automatiquement via GitHub Actions + Self-hosted runner*
        files: bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build summary
      if: always()
      run: |
        echo "## üèóÔ∏è Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner:** Self-hosted (Google Cloud Ubuntu 22.04)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ env.APK_FILE }}" ]; then
          echo "- **APK:** $(basename ${{ env.APK_FILE }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Size:** ${{ env.APK_SIZE }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Build time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup (optional)
      if: always()
      run: |
        echo "Build completed, temporary files preserved for caching"
